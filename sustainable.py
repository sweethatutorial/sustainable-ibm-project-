# -*- coding: utf-8 -*-
"""sustainable.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zftGdK7W2_oj2NdEeokQvnmEIH_EmRC0
"""

!pip install gradio transformers torch PyPDF2

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2
import os

# -----------------------------
# Global Variables and Data Storage
# For a real application, replace this with a database (e.g., SQLite)
# -----------------------------
USERS_DB = {}

# -----------------------------
# Load Model
# -----------------------------
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# -----------------------------
# Helper Functions
# -----------------------------
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def extract_text_from_pdf(pdf_file):
    if pdf_file is None:
        return ""
    try:
        pdf_reader = PyPDF2.PdfReader(pdf_file.name)
        text = "".join([page.extract_text() + "\n" for page in pdf_reader.pages])
        return text
    except Exception as e:
        return f"Error reading PDF: {str(e)}"

def eco_tips_generator(problem_keywords):
    prompt = f"üå± Generate practical and actionable eco-friendly tips related to: {problem_keywords}. Provide specific solutions and suggestions."
    return generate_response(prompt, max_length=800)

def policy_summarization(pdf_file, policy_text):
    content = ""
    if pdf_file is not None:
        content = extract_text_from_pdf(pdf_file)
    elif policy_text:
        content = policy_text

    if not content:
        return "Please provide a PDF or text to summarize."

    summary_prompt = f"üìë Summarize the following policy document:\n\n{content}"
    return generate_response(summary_prompt, max_length=1000)

def kpi_forecasting(kpi_name, historical_data):
    prompt = f"üìä Analyze the historical data for the KPI '{kpi_name}': {historical_data}. Provide a narrative forecast and possible influencing factors."
    return generate_response(prompt, max_length=800)

def citizen_feedback_reporting(feedback_text):
    prompt = f"üìù Analyze the following citizen feedback and generate a structured report:\n\n{feedback_text}"
    return generate_response(prompt, max_length=1000)

def chat_assistant(message, history):
    full_prompt = "You are a helpful assistant. Provide concise and informative responses.\n"
    for human_message, ai_message in history:
        full_prompt += f"User: {human_message}\nAssistant: {ai_message}\n"
    full_prompt += f"User: {message}\nAssistant:"
    response = generate_response(full_prompt, max_length=500)
    return response

# -----------------------------
# Authentication Functions
# -----------------------------
def login(username, password):
    if username in USERS_DB and USERS_DB[username] == password:
        return gr.update(visible=False), gr.update(visible=True), f"Welcome {username}! To the Sustainable Smart City Assistant! üåç"
    else:
        return gr.update(visible=True), gr.update(visible=False), "Invalid username or password. Please try again."

def signup(username, password):
    if username in USERS_DB:
        return "Username already exists. Please choose another one."
    else:
        USERS_DB[username] = password
        print(f"New user registered: {username}")
        return "Account created successfully! You can now log in."

def logout():
    return gr.update(visible=True), gr.update(visible=False), "You have been logged out. Please log in to continue."

# Functions to toggle login/signup views
def show_signup_view():
    return gr.update(visible=False), gr.update(visible=True)

def show_login_view():
    return gr.update(visible=True), gr.update(visible=False)


# -----------------------------
# Gradio App
# -----------------------------
with gr.Blocks(theme="soft", css="""
    body {
        background-color: black;
        color: white;
    }
    h1, h2, h3, h4, h5, h6 {
        color: darkblue; /* Highlight headings */
    }
    .gradio-container {
        background-color: black !important;
    }
    .gr-text {
        color: white !important; /* Ensure text is visible */
    }
    .gr-button {
        background-color: #4CAF50 !important; /* Example button color */
        color: white !important;
    }
    .gr-input, .gr-textarea {
        background-color: #333 !important;
        color: white !important;
        border-color: #555 !important;
    }
    .gr-tab {
        background-color: #222 !important;
        color: white !important;
    }
    .gr-tab.selected {
        background-color: #444 !important;
    }
    /* Highlight specific text elements */
    .highlight-green {
        color: darkgreen !important;
        font-weight: bold;
    }
""") as app:
    login_message = gr.Markdown("## Please log in or sign up to continue.")

    login_group = gr.Group(visible=True)
    main_app_group = gr.Group(visible=False)

    with login_group:
        with gr.Column(
            scale=1,
            min_width=600,
            elem_id="login-container"
        ):
            gr.Markdown("<center><h1>Welcome</h1></center>")
            # Removed the gr.Image component as requested
            # gr.Image(
            #     value="https://cdn-icons-png.flaticon.com/512/2922/2922510.png", # Example icon URL
            #     width=100,
            #     height=100,
            #     container=False
            # )

            # Login Form Group (visible by default)
            login_form_group = gr.Group(visible=True)
            with login_form_group:
                login_username = gr.Textbox(
                    label="Username",
                    placeholder="Username",
                    elem_id="username-field",
                    show_label=False
                )
                login_password = gr.Textbox(
                    label="Password",
                    placeholder="Password",
                    type="password",
                    elem_id="password-field",
                    show_label=False
                )

                with gr.Row():
                    remember_me = gr.Checkbox(label="Remember me")
                    gr.Markdown("<a href='#' style='text-align: right;'>Forgot password?</a>")

                login_btn = gr.Button("LOGIN")

                gr.Markdown("---")
                signup_btn_link = gr.Button("Don't have an account? Sign Up", variant="secondary")

            # Sign-up Form Group (hidden by default)
            signup_form_group = gr.Group(visible=False)
            with signup_form_group:
                gr.Markdown("<center><h1>Create an Account</h1></center>")
                signup_status = gr.Markdown("")
                signup_username = gr.Textbox(label="New Username", placeholder="New Username")
                signup_password = gr.Textbox(label="New Password", type="password", placeholder="New Password")

                signup_btn = gr.Button("Sign Up")
                gr.Markdown("---")
                back_to_login_btn = gr.Button("Back to Login", variant="secondary")

    with main_app_group:
        welcome_message = gr.Markdown(value="## Welcome to the Sustainable Smart City Assistant! üåç")
        gr.Markdown(
            """
            Powered by **IBM Granite LLM**
            ---
            <span class="highlight-green">‚úÖ Eco-friendly Tips</span> | <span class="highlight-green">üìë Policy Summarization</span> | <span class="highlight-green">üìä KPI Forecasting</span> | <span class="highlight-green">üìù Feedback Analysis</span> | <span class="highlight-green">ü§ñ AI Chat</span>
            """
        )
        logout_btn = gr.Button("Logout")

        with gr.Tabs():
            with gr.TabItem("üå± Eco Tips Generator"):
                gr.Markdown("### Generate eco-friendly lifestyle and sustainability tips")
                with gr.Row():
                    with gr.Column():
                        keywords_input = gr.Textbox(
                            label="Enter Environmental Problem/Keywords",
                            placeholder="e.g., plastic, solar, water waste, energy saving...",
                            lines=3
                        )
                        generate_tips_btn = gr.Button("üå± Generate Eco Tips")
                    with gr.Column():
                        tips_output = gr.Textbox(label="‚úÖ Sustainable Living Tips", lines=15, interactive=False)
                generate_tips_btn.click(eco_tips_generator, inputs=keywords_input, outputs=tips_output)

            with gr.TabItem("üìë Policy Summarization"):
                gr.Markdown("### Upload or paste policy text to get a clear summary")
                with gr.Row():
                    with gr.Column():
                        pdf_upload = gr.File(label="üìÇ Upload Policy PDF", file_types=[".pdf"])
                        policy_text_input = gr.Textbox(
                            label="Or Paste Policy Text",
                            placeholder="Paste policy document text...",
                            lines=5
                        )
                        summarize_btn = gr.Button("üìë Summarize Policy")
                    with gr.Column():
                        summary_output = gr.Textbox(label="üìå Policy Summary & Key Points", lines=20, interactive=False)
                summarize_btn.click(policy_summarization, inputs=[pdf_upload, policy_text_input], outputs=summary_output)

            with gr.TabItem("üìä KPI Forecasting"):
                gr.Markdown("### Simulate KPI Forecasting with simple trend analysis")
                with gr.Row():
                    with gr.Column():
                        kpi_name_input = gr.Textbox(label="KPI Name", placeholder="e.g., Monthly Solar Energy Output")
                        historical_data_input = gr.Textbox(
                            label="Historical Data",
                            placeholder="e.g., 120, 135, 150, 145, 160...",
                            lines=3
                        )
                        forecast_btn = gr.Button("üìä Generate Forecast")
                    with gr.Column():
                        forecast_output = gr.Textbox(label="üìà Forecast Analysis", lines=15, interactive=False)
                forecast_btn.click(kpi_forecasting, inputs=[kpi_name_input, historical_data_input], outputs=forecast_output)

            with gr.TabItem("üìù Citizen Feedback Reporting"):
                gr.Markdown("### Analyze citizen feedback and generate actionable reports")
                with gr.Row():
                    with gr.Column():
                        feedback_input = gr.Textbox(
                            label="Citizen Feedback",
                            placeholder="Paste feedback text here...",
                            lines=10
                        )
                        report_btn = gr.Button("üìù Generate Report")
                    with gr.Column():
                        report_output = gr.Textbox(label="üìã Feedback Report", lines=15, interactive=False)
                report_btn.click(citizen_feedback_reporting, inputs=feedback_input, outputs=report_output)

            with gr.TabItem("ü§ñ Chat Assistant"):
                gr.Markdown("### Ask questions about environment, policies, or sustainability")
                gr.ChatInterface(fn=chat_assistant)

            with gr.TabItem("‚ÑπÔ∏è About"):
                gr.Markdown(
                    """
                    ### About This Application

                    The **Sustainable Smart City Assistant** is a powerful AI tool designed to help urban planners, citizens, and policymakers manage and improve sustainability initiatives. It leverages the **IBM Granite 3.2-2b-instruct LLM** to provide insightful, data-driven solutions for a greener, smarter city.

                    **Key Features:**
                    * **Eco-friendly Tips:** Generate actionable tips for sustainable living.
                    * **Policy Summarization:** Quickly understand complex policy documents.
                    * **KPI Forecasting:** Analyze and predict key performance indicators.
                    * **Citizen Feedback Reporting:** Structure and analyze public feedback.
                    * **AI Chat Assistant:** A conversational AI for any sustainability-related query.

                    This project demonstrates the potential of large language models to tackle complex real-world problems in urban development and environmental management.
                    """
                )

            with gr.TabItem("‚ùì Help"):
                gr.Markdown(
                    """
                    ### How to Use the Sustainable Smart City Assistant

                    **1. Eco Tips Generator:**
                    * Enter keywords related to an environmental problem (e.g., "plastic waste," "water conservation").
                    * Click "Generate Eco Tips" to get specific, practical advice.

                    **2. Policy Summarization:**
                    * You can either upload a PDF file or paste the text of a policy document.
                    * Click "Summarize Policy" to receive a concise summary of the key points.

                    **3. KPI Forecasting:**
                    * Provide the name of a KPI (e.g., "Monthly Energy Consumption").
                    * Enter a series of numerical historical data points, separated by commas (e.g., "120, 135, 150").
                    * Click "Generate Forecast" to receive a narrative prediction.

                    **4. Citizen Feedback Reporting:**
                    * Paste raw citizen feedback text into the input box.
                    * Click "Generate Report" to get a structured analysis of the feedback.

                    **5. Chat Assistant:**
                    * Use this tab to ask any general questions about sustainable cities, environmental policies, or the functionalities of this app.

                    If you encounter any issues, please check your inputs and ensure they are in the correct format.
                    """
                )

    # Event Handlers
    login_btn.click(
        fn=login,
        inputs=[login_username, login_password],
        outputs=[login_group, main_app_group, welcome_message]
    )

    signup_btn.click(
        fn=signup,
        inputs=[signup_username, signup_password],
        outputs=signup_status
    )

    logout_btn.click(
        fn=logout,
        inputs=None,
        outputs=[login_group, main_app_group, login_message]
    )

    signup_btn_link.click(
        fn=show_signup_view,
        inputs=None,
        outputs=[login_form_group, signup_form_group]
    )

    back_to_login_btn.click(
        fn=show_login_view,
        inputs=None,
        outputs=[login_form_group, signup_form_group]
    )

app.launch(inline=False, share=True)